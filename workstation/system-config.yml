- name: Play for configuring the host once basic packages are installed
  hosts: localhost
  become: false

  vars:
    username: "{{ ansible_user_id }}"

  tasks:
    - name: Echo init message
      ansible.builtin.debug:
        msg: Playing system-config.yml as user {{ username }}

    - name: Add polkit rule to allow virt-manager to manage virtual machines
      become: true
      ansible.builtin.copy:
        dest: /etc/polkit-1/rules.d/80-libvirt-manage.rules
        content: |
          polkit.addRule(function(action, subject) {
            if (action.id == "org.libvirt.unix.manage" && subject.local && subject.active && subject.isInGroup("wheel")) {
                return polkit.Result.YES;
            }
          });
        mode: u=r,g=r,o=r
        owner: root

    - name: Add config to gracefully shutdown virtual machines
      become: true
      ansible.builtin.copy:
        dest: /etc/sysconfig/libvirt-guests
        content: |
          # URIs to check for running guests
          # example: URIS='default xen:/// vbox+tcp://host/system lxc:///'
          #URIS=default

          # action taken on host boot
          # - start   all guests which were running on shutdown are started on boot
          #           regardless on their autostart settings
          # - ignore  libvirt-guests init script won't start any guest on boot, however,
          #           guests marked as autostart will still be automatically started by
          #           libvirtd
          ON_BOOT=ignore

          # Number of seconds to wait between each guest start. Set to 0 to allow
          # parallel startup.
          #START_DELAY=0

          # action taken on host shutdown
          # - suspend   all running guests are suspended using virsh managedsave
          # - shutdown  all running guests are asked to shutdown. Please be careful with
          #             this settings since there is no way to distinguish between a
          #             guest which is stuck or ignores shutdown requests and a guest
          #             which just needs a long time to shutdown. When setting
          #             ON_SHUTDOWN=shutdown, you must also set SHUTDOWN_TIMEOUT to a
          #             value suitable for your guests.
          ON_SHUTDOWN=shutdown

          # If set to non-zero, shutdown will suspend guests concurrently. Number of
          # guests on shutdown at any time will not exceed number set in this variable.
          PARALLEL_SHUTDOWN=3

          # Number of seconds we're willing to wait for a guest to shut down. If parallel
          # shutdown is enabled, this timeout applies as a timeout for shutting down all
          # guests on a single URI defined in the variable URIS. If this is 0, then there
          # is no time out (use with caution, as guests might not respond to a shutdown
          # request). The default value is 300 seconds (5 minutes).
          #SHUTDOWN_TIMEOUT=300

          # If non-zero, try to bypass the file system cache when saving and
          # restoring guests, even though this may give slower operation for
          # some file systems.
          #BYPASS_CACHE=0
        mode: u=r,g=r,o=r
        owner: root

    - name: Configure NetworkManager to not manage tailscale0 interface since it interefers with firewall zone
      become: true
      ansible.builtin.copy:
        dest: /etc/NetworkManager/conf.d/unmanage-tailscale.conf
        content: |
          [keyfile]
          unmanaged-devices=interface-name:tailscale0

        mode: u=r,g=r,o=r
        owner: root

    - name: Configure fail2ban
      block:
        - name: Customize firewall actions to restrict all protocols and ports upon intrusion
          become: true
          ansible.builtin.copy:
            dest: /etc/fail2ban/action.d/firewallcmd-rich-rules.local
            content: |
              [Definition]
              rich-suffix = <rich-blocktype>
              fwcmd_rich_rule = rule family='<family>' source address='<ip>' %(rich-suffix)s
              actionban = zones="<zones>"; for z in $(echo $zones | tr ", " " "); do firewall-cmd --zone=$z --add-rich-rule="%(fwcmd_rich_rule)s"; done
              actionunban = zones="<zones>"; for z in $(echo $zones | tr ", " " "); do firewall-cmd --zone=$z --remove-rich-rule="%(fwcmd_rich_rule)s"; done

            mode: u=r,g=r,o=r
            owner: root

        - name: Customize default settings and enable jails
          become: true
          ansible.builtin.copy:
            dest: /etc/fail2ban/jail.d/default.local
            content: |
              [DEFAULT]
              zones = public,home,docker
              banaction = firewallcmd-rich-rules[zones="%(zones)s"]
              banaction_allports = firewallcmd-rich-rules[zones="%(zones)s", actiontype=<allports>]
              port = 0-65535
              bantime = 24h

              [pam-generic]
              enabled = true

              [sshd]
              enabled = true

            mode: u=r,g=r,o=r
            owner: root

    - name: Configure firewall
      block:
        - name: "Change eth0 interface zone to home"
          become: true
          community.general.nmcli:
            type: wifi
            ifname: wlo1
            conn_name: sweethome-ap
            ssid: sweethome-ap
            zone: home
            state: present

        - name: "Change tailscale0 interface zone to home"
          become: true
          ansible.posix.firewalld:
            zone: home
            interface: tailscale0
            permanent: true
            state: enabled

        - name: Allow services on zone "home"
          become: true
          ansible.posix.firewalld:
            zone: home
            service: "{{ item }}"
            permanent: true
            immediate: true
            state: enabled
          with_items:
            - mdns
            - cockpit
            - ssh
            - syncthing
            - kdeconnect

        - name: Allow services on zone "libvirt"
          become: true
          ansible.posix.firewalld:
            zone: libvirt
            service: "{{ item }}"
            permanent: true
            immediate: true
            state: enabled
          with_items:
            - syncthing

        - name: Block services on zone "public"
          become: true
          ansible.posix.firewalld:
            zone: public
            service: "{{ item }}"
            permanent: true
            immediate: true
            state: disabled
          with_items:
            - mdns
            - ssh
            - cockpit
            - mdns

        - name: Change default zone
          become: true
          shell: |
            firewall-cmd --set-default-zone=public
            firewall-cmd --runtime-to-permanent

    - name: Start systemd services
      become: true
      ansible.builtin.systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      with_items:
        - fstrim.timer
        - cockpit.socket
        - libvirtd
        - libvirt-guests
        - fail2ban
        - tailscaled
        - syncthing@{{ ansible_user_id }}
