- name: Playbook for configuring the host once basic packages are installed
  hosts: localhost
  become: false

  vars:
    username: "{{ ansible_user_id }}"

  tasks:
    - name: Echo init message
      ansible.builtin.debug:
        msg:
          - User - {{ username }}
          - Distribution - {{ ansible_distribution }}
          - Distribution Version - {{ ansible_distribution_major_version }}

    - name: Configure journald
      block:
        - name: Create journald.conf.d directory
          become: true
          ansible.builtin.file:
            path: /etc/systemd/journald.conf.d
            state: directory
            mode: u=rwX,g=rX,o=rX
            owner: root
            group: root

        - name: Set journald storage as volatile
          become: true
          ansible.builtin.copy:
            dest: /etc/systemd/journald.conf.d/00-journal-storage.conf
            content: |
              [Journal]
              Storage=volatile

            mode: u=r,g=r,o=r
            owner: root

    - name: Configure fail2ban
      block:
        - name: Customize firewall actions to restrict all protocols and ports upon intrusion
          become: true
          ansible.builtin.copy:
            dest: /etc/fail2ban/action.d/firewallcmd-rich-rules.local
            content: |
              [Definition]
              rich-suffix = <rich-blocktype>
              fwcmd_rich_rule = rule family='<family>' source address='<ip>' %(rich-suffix)s
              actionban = zones="<zones>"; for z in $(echo $zones | tr ", " " "); do firewall-cmd --zone=$z --add-rich-rule="%(fwcmd_rich_rule)s"; done
              actionunban = zones="<zones>"; for z in $(echo $zones | tr ", " " "); do firewall-cmd --zone=$z --remove-rich-rule="%(fwcmd_rich_rule)s"; done

            mode: u=r,g=r,o=r
            owner: root

        - name: Customize default settings and enable jails
          become: true
          ansible.builtin.copy:
            dest: /etc/fail2ban/jail.d/default.local
            content: |
              [DEFAULT]
              zones = public,home,docker
              banaction = firewallcmd-rich-rules[zones="%(zones)s"]
              banaction_allports = firewallcmd-rich-rules[zones="%(zones)s", actiontype=<allports>]
              port = 0-65535
              bantime = 24h

              [pam-generic]
              enabled = true

              [sshd]
              enabled = true

            mode: u=r,g=r,o=r
            owner: root

    - name: Configure firewall
      block:
        - name: Configure NetworkManager to not manage tailscale0 interface since it interferes with firewall zone
          become: true
          ansible.builtin.copy:
            dest: /etc/NetworkManager/conf.d/unmanage-tailscale.conf
            content: |
              [keyfile]
              unmanaged-devices=interface-name:tailscale0

            mode: u=r,g=r,o=r
            owner: root

        - name: Allow services on zone "home"
          become: true
          ansible.posix.firewalld:
            zone: home
            service: "{{ item }}"
            permanent: true
            immediate: true
            state: enabled
          with_items:
            - mdns
            - cockpit
            - ssh

        - name: "Change end0 interface zone to home in nmcli"
          become: true
          community.general.nmcli:
            type: ethernet
            conn_name: end0
            zone: home
            state: present

        - name: "Change end0 interface zone to home in firewalld"
          become: true
          ansible.posix.firewalld:
            zone: home
            interface: end0
            permanent: true
            immediate: true
            state: enabled

        - name: "Change tailscale0 interface zone to home"
          become: true
          ansible.posix.firewalld:
            zone: home
            interface: tailscale0
            permanent: true
            immediate: true
            state: enabled

        - name: Block services on zone "public"
          become: true
          ansible.posix.firewalld:
            zone: public
            service: "{{ item }}"
            permanent: true
            # Don't block SSH immediately as it might block access to the server permanently.
            # immediate: true
            state: disabled
          with_items:
            - mdns
            - ssh
            - cockpit
            - mdns

        - name: Change default firewalld zone
          become: true
          ansible.builtin.command: firewall-cmd --set-default-zone=public --permanent

    - name: Configure systemd services
      block:
        - name: Create podman-auto-update.timer override directory
          become: true
          ansible.builtin.file:
            path: /etc/systemd/system/podman-auto-update.timer.d
            state: directory
            mode: "0755"

        - name: Configure podman-auto-update.timer to run weekly
          become: true
          ansible.builtin.copy:
            dest: /etc/systemd/system/podman-auto-update.timer.d/override.conf
            content: |
              [Timer]
              OnCalendar=
              OnCalendar=Sat, 03:00

            mode: u=rw,g=r,o=r
            owner: root

        - name: Create user podman-auto-update.timer override directory
          ansible.builtin.file:
            path: ~/.config/systemd/user/podman-auto-update.timer.d
            state: directory
            mode: "0755"

        - name: Configure user podman-auto-update.timer to run weekly
          ansible.builtin.copy:
            dest: ~/.config/systemd/user/podman-auto-update.timer.d/override.conf
            content: |
              [Timer]
              OnCalendar=
              OnCalendar=Sat, 03:00

            mode: u=rw,g=r,o=r

        - name: Start systemd services
          become: true
          ansible.builtin.systemd_service:
            name: "{{ item }}"
            enabled: true
            state: started
          with_items:
            - fstrim.timer
            - fail2ban
            - cockpit.socket
            # Disable sshd.socket for now since it does not play nicely with fail2ban
            # - sshd.socket
            - sshd
            - tailscaled
            - podman-auto-update.timer

        - name: Start user systemd services
          ansible.builtin.systemd_service:
            name: "{{ item }}"
            enabled: true
            state: started
            scope: user
          with_items:
            - podman-auto-update.timer

        - name: Enable linger to auto start user services
          ansible.builtin.shell: |
            loginctl enable-linger
